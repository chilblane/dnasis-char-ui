types CharacterWindow
{
	type customizable_gui__window_character__character_info = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		hbox = {
			name = "character_info"
			layoutpolicy_horizontal = expanding
			margin = { 0 5 }
			margin_left = 5
			using = Animation_ShowHide_Quick
			visible = "[Not( GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('hide_ui_character_info').GetValue, '(CFixedPoint)0' ) )]"
			using = Animation_ShowHide_Quick


			background = {
				using = Background_Area_Dark
				margin_left = 5
			}

			# Customizable GUI: Name, Traits, House
			customizable_gui__window_character__character_info__name_traits_house = {}
		}

		# Customizable GUI: Realm
		customizable_gui__window_character__character_info__realm = {}

		### BOTTOM AREA

		# Customizable GUI: Tabs
		customizable_gui__window_character__character_info__bottom_area__tabs = {}

		spacer = { size = { 0 2 } }

		widget = {
			visible = "[CharacterWindow.AreNoneExpanded]"
			layoutpolicy_vertical = preferred
			layoutpolicy_horizontal = expanding
			size = { 0 330 } # { 0 350 }

			using = Animation_Tab_Switch

			# Customizable GUI: Family
			customizable_gui__window_character__character_info__bottom_area__family = {}

			# Customizable GUI: Relations
			customizable_gui__window_character__character_info__bottom_area__relations = {}

			# Customizable GUI: Court
			customizable_gui__window_character__character_info__bottom_area__court = {}

			# Customizable GUI: Vassals
			customizable_gui__window_character__character_info__bottom_area__vassals = {}
		}

		### EXPANDED VIEWS

		# TRAITS EXPANDED
		scrollbox = {
			name = "traits_expanded"
			visible = "[CharacterWindow.AreTraitsExpanded]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			using = Animation_Tab_Switch

			blockoverride "scrollbox_content"
			{
				spacing = 10

				vbox = {
					spacing = 10

					text_label_center = {
						text = "MODIFIERS"
					}

					text_single = {
						visible = "[IsDataModelEmpty(CharacterWindow.GetTimedModifiers)]"
						text = "CV_NO_MODIFIERS"
						default_format = "#low;italic"
					}

					dynamicgridbox = {
						name = "modifiers_grid"
						datamodel = "[CharacterWindow.GetTimedModifiers]"
						datamodel_wrap = 8
						flipdirection = yes

						item = {
							modifier_item_icon = {
								size = { 35 35 }
							}
						}
					}
				}

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				vbox = {
					spacing = 10
					datacontext = "[CharacterWindow.GetTraitArrays]"

					text_label_center = {
						text = "TRAITS"
					}

					fixedgridbox = {
						name = "personality_traits_grid"
						datamodel = "[TraitArrays.GetPersonalityTraits]"
						addcolumn = 85
						addrow = 105
						flipdirection = yes
						datamodel_wrap = 6

						item = {
							icon_trait = {
								text_multi = {
									parentanchor = bottom|hcenter
									widgetanchor = top|hcenter
									position = { 0 -5 }
									autoresize = yes
									max_width = 80
									text = "[Trait.GetNameNoTooltip(Character.Self)]"
									default_format = "#high"
									align = hcenter
								}
							}
						}
					}

					fixedgridbox = {
						name = "traits_grid"
						datamodel = "[TraitArrays.GetTraits]"
						addcolumn = 85
						addrow = 105
						flipdirection = yes
						datamodel_wrap = 6

						item = {
							icon_trait = {
								text_multi = {
									parentanchor = bottom|hcenter
									widgetanchor = top|hcenter
									position = { 0 -5 }
									autoresize = yes
									max_width = 80
									text = "[Trait.GetNameNoTooltip(Character.Self)]"
									default_format = "#high"
									align = hcenter
								}
							}
						}
					}
				}
			}
		}

		# TITLES EXPANDED
		scrollbox = {
			name = "titles_expanded"
			visible = "[CharacterWindow.AreTitlesExpanded]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			using = Animation_Tab_Switch

			blockoverride "scrollbox_content"
			{
				spacing = 15

				text_label_center = {
					text = "CV_TITLES_NOCOUNT"
				}

				# MOD(custom-form-of-address)
				CTFA_fixedgridbox_titles_box_bishop = {}
				# END MOD

				fixedgridbox = {
					name = "titles_box_bishop"
					datacontext = "[CharacterWindow.GetCharacter]"
					flipdirection = yes
					addrow = 90
					addcolumn = 270
					datamodel_wrap = 2

					# MOD(custom-form-of-address)
					using = CTFA_hide_if_has_vanity_title
					# END MOD

					datamodel = "[CharacterWindow.GetTitles]"

					item = {
						flowcontainer = {
							datacontext = "[TitleItem.GetTitle]"
							spacing = 5

							coa_title_small_crown = {
								using = tooltip_ne
							}

							text_multi = {
								text = "[Title.GetNameNoTooltip]"
								parentanchor = vcenter
								autoresize = yes
								default_format = "#high"
								using = Font_Size_Medium
								max_width = 190
								margin_top = 5
							}
						}
					}
				}
			}
		}

		# CLAIMS EXPANDED
		scrollbox = {
			name = "claims_expanded"
			visible = "[CharacterWindow.AreClaimsExpanded]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			using = Animation_Tab_Switch

			blockoverride "scrollbox_content"
			{
				spacing = 10

				text_label_center = {
					text = "CV_CLAIMS_NOCOUNT"
				}

				flowcontainer = {
					name = "titles_box_bishop"
					datacontext = "[CharacterWindow.GetCharacter]"
					datamodel = "[CharacterWindow.GetClaims]"
					direction = vertical
					spacing = 10

					item = {
						flowcontainer = {
							spacing = 5
							using = tooltip_ne
							tooltip = "[Claim.GetTooltip]"

							coa_title_medium = {
								datacontext = "[Claim.GetTitle]"
							}

							flowcontainer = {
								direction = vertical
								ignoreinvisible = yes

								text_single = {
									text = "[Claim.GetTitle.GetNameNoTooltip|U]"
									default_format = "#high"
									using = Font_Size_Big
								}

								text_single = {
									name = "pressed_claim"
									visible = "[And(Claim.IsPressed, Not(Claim.IsImplicit))]"
									text = "[pressed_claim_i][pressed_claim|E]"
								}

								text_single = {
									name = "unpressed_claim"
									visible = "[And(Not(Claim.IsPressed), Not(Claim.IsImplicit))]"
									text = "[unpressed_claim_i][unpressed_claim|E]"
								}

								text_single = {
									name = "implicit_claim"
									visible = "[Claim.IsImplicit]"
									text = "[implicit_claim_i][implicit_claim|E]"
								}

								text_multi = {
									visible = "[Claim.GetTitle.GetHolder.IsValid]"
									text = "CLAIM_TITLE_HOLDER"
									max_width = 400
									autoresize = yes
								}

								text_single = {
									visible = "[Not(Claim.GetTitle.GetHolder.IsValid)]"
									text = "CLAIM_TITLE_NOT_CREATED"
									default_format = "#weak"
									align = nobaseline
								}
							}
						}
					}
				}
			}
		}

		# DIPLOMACY EXPANDED
		scrollbox = {
			name = "diplomacy_expanded"
			visible = "[CharacterWindow.AreDiplomacyExpanded]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			using = Animation_Tab_Switch

			blockoverride "scrollbox_content"
			{
				spacing = 15

				text_label_center = {
					text = "CV_DIPLOMACY"
				}

				vbox = {
					name = "diplomacy_items"
					datamodel = "[CharacterWindow.GetDiplomacyItems]"
					layoutpolicy_horizontal = expanding

					item = {
						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = 10

							divider_light = {
								layoutpolicy_horizontal = expanding
							}

							button_group = {
								layoutpolicy_horizontal = expanding
								alwaystransparent = "[DiplomacyItem.IsConfederation]"

								onclick = "[DiplomacyItem.OnClick]"

								tooltip = "[DiplomacyItem.GetTooltip]"
								using = tooltip_se

								hbox = {
									widget = {
										size = { 65 74 }

										button = {
											parentanchor = top|hcenter
											alwaystransparent = "[DiplomacyItem.IsConfederation]"
											position = { 0 -30 }
											size = { 50 50 }
											texture = "gfx/interface/icons/diplomatic_icons.dds"
											frame = "[DiplomacyItem.GetDiplomacyFrame]"
											framesize = { 120 120 }
											scale = 1.3

											tooltip_visible = no
										}

										coa_realm_medium = {
											visible = "[And(Not(DiplomacyItem.IsStruggle), Not(DiplomacyItem.IsConfederation))]"
											datacontext = "[DiplomacyItem.GetTargetCharacter]"
											parentanchor = hcenter

											tooltip = "[DiplomacyItem.GetTooltip]"

											text_single = {
												name = "warscore"
												visible = "[DiplomacyItem.HasWarScore]"
												parentanchor = hcenter
												position = { 0 -20 }

												text = "[DiplomacyItem.GetWarScoreFraction|0%=+]"
												align = nobaseline
												using = Font_Size_Medium

												background = {
													using = Background_Area_ExtraDark
													margin = { 3 1 }
												}
											}
										}

										coa_confederation_medium = {
											datacontext = "[DiplomacyItem.GetConfederation]"
											visible = "[DiplomacyItem.IsConfederation]"
											parentanchor = hcenter
										}

										button = {
											datacontext = "[DiplomacyItem.GetStruggle]"
											datacontext = "[DiplomacyItem.GetTargetCharacter]"
											visible = "[DiplomacyItem.IsStruggle]"
											position = { 0 -3 }
											size = { 70 90 }

											onclick = "[DiplomacyItem.OnClick]"

											tooltipwidget = struggle_tooltip
											using = tooltip_es
											tooltip_offset = { 0 22 }

											widget_struggle_icon = {}
										}
									}

									text_multi = {
										layoutpolicy_horizontal = expanding
										alwaystransparent = "[DiplomacyItem.IsConfederation]"

										text = "[DiplomacyItem.GetInfo]"
										autoresize = yes
										max_width = 450
										min_height = 120
										using = Font_Size_Tiny
									}
								}
							}

							hbox = {
								name = "reason_characters"
								visible = "[DiplomacyItem.HasReasonCharacters]"
								margin_bottom = 10

								portrait_head_small = {
									name = "reason_character_left"
									datacontext = "[DiplomacyItem.GetLeftReasonCharacter]"
									blockoverride "opinion_box" {}
									blockoverride "status_icons" {}
								}

								portrait_head_small = {
									name = "reason_character_right"
									datacontext = "[DiplomacyItem.GetRightReasonCharacter]"
									blockoverride "opinion_box" {}
									blockoverride "status_icons" {}

									blockoverride "portrait_transformation"
									{
										portrait_scale = { -1 1 }
										portrait_offset = { 1 0 }
									}
								}
							}
						}
					}
				}
			}
		}

		# Modifiers expanded
		scrollbox = {
			name = "modifiers_expanded"
			visible = "[CharacterWindow.AreModifiersExpanded]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			using = Animation_Tab_Switch

			blockoverride "scrollbox_content"
			{
				spacing = 15

				text_label_center = {
					text = "MODIFIERS"
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					datamodel = "[CharacterWindow.GetTimedModifiers]"
					spacing = 2

					item = {
						vbox = {
							layoutpolicy_horizontal = expanding

							hbox = {
								layoutpolicy_horizontal = expanding

								hbox = {
									margin_right = 10
									margin_top = 8
									margin_left = -4

									icon = {
										size = { 32 32 }
										texture = "[ModifierItem.GetIcon]"
									}
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									text = "[ModifierItem.GetStaticModifier.GetName]"
								}
							}

							textbox = {
								layoutpolicy_horizontal = expanding
								visible = "[ModifierItem.HasTooltipDataByTag('single_modifier')]"
								datacontext = "[ModifierItem.GetSingleModifierTooltipData]"
								max_width = 500
								using = DefaultTooltipText
								multiline = yes
								text = "[TimedModifierSingleItem.GetDesc]"
								alwaystransparent = no
							}

							vbox = {
								visible = "[ModifierItem.HasTooltipDataByTag('preview_list')]"
								datacontext = "[ModifierItem.GetPreviewList]"
								layoutpolicy_horizontal = expanding

								textbox = {
									layoutpolicy_horizontal = expanding
									max_width = 500
									using = DefaultTooltipText
									multiline = yes
									text = "[TimedModifierPreviewList.GetScaledDesc]"
									alwaystransparent = no
								}

								vbox = {
									datamodel = "[TimedModifierPreviewList.GetItems]"
									layoutpolicy_horizontal = expanding
									max_width = 500

									item = {
										vbox = {
											layoutpolicy_horizontal = expanding

											text_single = {
												layoutpolicy_horizontal = expanding
												text = "[TimedModifierPreviewItem.GetTitle]"
											}

											text_single = {
												layoutpolicy_horizontal = expanding
												text = "[TimedModifierPreviewItem.GetExpirationDate]"
											}

											expand = {}
										}
									}
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								visible = "[ModifierItem.HasTooltipDataByTag('scaled_single_modifier')]"
								datacontext = "[ModifierItem.GetScaledSingleModifierTooltipData]"

								textbox = {
									layoutpolicy_horizontal = expanding
									max_width = 500
									using = DefaultTooltipText
									multiline = yes
									text = "[TimedModifierScaledSingleItem.GetDesc]"
									alwaystransparent = no
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									datamodel = "[TimedModifierScaledSingleItem.GetEffectItems]"

									item = {
										textbox = {
											layoutpolicy_horizontal = expanding
											max_width = 500
											margin_top = 5
											margin_left = 10
											margin_right = 5
											margin_bottom = 10
											using = DefaultTooltipText
											using = Background_Area
											text = "[CString.GetString]"
											alwaystransparent = no
										}
									}
								}

								text_single = {
									layoutpolicy_horizontal = growing
									max_width = 500
									text = "[TimedModifierScaledSingleItem.GetExpirationDate]"
								}
							}

							spacer = {
								size = { 2 10 }
							}

							divider_light = {
								layoutpolicy_horizontal = expanding
								# Don't show divider after the last item in the datamodel
								visible = "[Not( EqualTo_int32( PdxGuiWidget.GetIndexInDataModel, Subtract_int32( GetDataModelSize( CharacterWindow.GetTimedModifiers ), '(int32)1' ) ) )]"
							}
						}
					}
				}
			}
		}
	}
}
